# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A headless service to create DNS records.
apiVersion: v1
kind: Service
metadata:
  name: hdfs-namenode
  labels:
    app: hdfs-namenode
  annotations:
    # TODO: Deprecated. Replace tolerate-unready-endpoints with
    # v1.Service.PublishNotReadyAddresses.
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - port: 8020
    name: fs
  - port: 50070
    name: http
  clusterIP: None
  selector:
    app: hdfs-namenode
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: hdfs-namenode
spec:
  selector:
    matchLabels:
      app: hdfs-namenode
  minAvailable: 1
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: hdfs-namenode
spec:
  serviceName: "hdfs-namenode"
  # Create a size-2 set. The namenode DNS names will be
  # hdfs-namenode-0.hdfs-namenode.default.svc.cluster.local
  # and hdfs-namenode-1.hdfs-namenode.default.svc.cluster.local
  replicas: 2
  template:
    metadata:
      labels:
        app: hdfs-namenode
    spec:
      # Use hostNetwork so datanodes connect to namenode without going through an overlay network
      # like weave. Otherwise, namenode fails to see physical IP address of datanodes.
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - hfds-namenode
              topologyKey: "kubernetes.io/hostname"
      containers:
        # TODO: Support hadoop version as option.
        - name: hdfs-namenode
          image: uhopper/hadoop-namenode:2.7.2
          env:
            # The following env vars are listed according to low-to-high precedence order.
            # i.e. Whoever comes last will override the earlier value of the same variable.
            {{- if .Values.kerberosEnabled }}
            - name: CORE_CONF_hadoop_security_authentication
              value: kerberos
            - name: CORE_CONF_hadoop_security_authorization
              value: "true"
            - name: CORE_CONF_hadoop_rpc_protection
              value: privacy
            - name: HDFS_CONF_dfs_block_access_token_enable
              value: "true"
            - name: HDFS_CONF_dfs_encrypt_data_transfer
              value: "true"
            - name: HDFS_CONF_dfs_namenode_kerberos_principal
              value: hdfs/_HOST@{{ required "A valid kerberosRealm entry required!" .Values.kerberosRealm }}
            # TODO: Check if the https principal is no longer needed in newer
            # Hadoop version.
            - name: HDFS_CONF_dfs_namenode_kerberos_https_principal
              value: http/_HOST@{{ required "A valid kerberosRealm entry required!" .Values.kerberosRealm }}
            - name: HDFS_CONF_dfs_web_authentication_kerberos_principal
              value: http/_HOST@{{ required "A valid kerberosRealm entry required!" .Values.kerberosRealm }}
            - name: HDFS_CONF_dfs_namenode_keytab_file
              value: /etc/security/hdfs.keytab
            {{- end }}
            {{- range $key, $value := .Values.customHadoopConfig }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
            - name: CORE_CONF_fs_defaultFS
              value: hdfs://hdfs-k8s
            - name: CORE_CONF_ha_zookeeper_quorum
              value: {{ .Values.zookeeperQuorum }}
            - name: HDFS_CONF_dfs_nameservices
              value: hdfs-k8s
            - name: HDFS_CONF_dfs_ha_namenodes_hdfs___k8s
              value: nn0,nn1
            - name: HDFS_CONF_dfs_namenode_rpc___address_hdfs___k8s_nn0
              value: hdfs-namenode-0.hdfs-namenode.default.svc.cluster.local:8020
            - name: HDFS_CONF_dfs_namenode_rpc___address_hdfs___k8s_nn1
              value: hdfs-namenode-1.hdfs-namenode.default.svc.cluster.local:8020
            - name: HDFS_CONF_dfs_namenode_http___address_hdfs___k8s_nn0
              value: hdfs-namenode-0.hdfs-namenode.default.svc.cluster.local:50070
            - name: HDFS_CONF_dfs_namenode_http___address_hdfs___k8s_nn1
              value: hdfs-namenode-1.hdfs-namenode.default.svc.cluster.local:50070
            - name: HDFS_CONF_dfs_namenode_shared_edits_dir
              value: qjournal://{{ .Values.journalQuorum }}/hdfs-k8s
            - name: HDFS_CONF_dfs_ha_automatic___failover_enabled
              value: "true"
            - name: HDFS_CONF_dfs_ha_fencing_methods
              value: "shell(/bin/true)"
            - name: HDFS_CONF_dfs_client_failover_proxy_provider_hdfs___k8s
              value: org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider
            - name: HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check
              value: "false"
            - name: MULTIHOMED_NETWORK
              value: "0"
            - name: MY_POD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          command: ['/bin/sh', '-c']
          # The run.sh script is generated below by a init-container.
          args:
            - /entrypoint.sh /nn-start/run.sh
          ports:
          - containerPort: 8020
            name: fs
          - containerPort: 50070
            name: http
          volumeMounts:
            - name: metadatadir
              mountPath: /hadoop/dfs/name
            - name: nn-start
              mountPath: /nn-start
              readOnly: true
            {{- if .Values.kerberosEnabled }}
            - name: kerberos-config
              mountPath: /etc/krb5.conf
              subPath: {{ .Values.kerberosConfigFileName }}
              readOnly: true
            - name: kerberos-keytab-copy
              mountPath: /etc/security/
              readOnly: true
            {{- end }}
      initContainers:
        # Write the namenode bootstrap script which will start namenode daemons
        # after conducting optional metadata initialization steps. The metadata
        # initialization steps will take place in case the metadata dir is empty,
        # which will be the case only for the very first run. The specific steps
        # will differ depending on whether the namenode is active or standby.
        # We also assume, for the very first run, namenode-0 will be active and
        # namenode-1 will be standby as StatefulSet will launch namenode-0 first
        # and zookeeper will determine the sole namenode to be the active one.
        # For active namenode, the initialization steps will format the metadata,
        # zookeeper dir and journal node data entries.
        # For standby namenode, the initialization steps will simply receieve
        # the first batch of metadata updates from the journal node.
        # TODO: Support upgrade of metadata in case a new Hadoop version requires it.
        - name: write-start-script
          image: busybox:1.27.1
          command: ['sh', '-c']
          args:
            - >-
              (echo '#!/bin/bash -x' > $OUT);
              (echo 'if [[ ! -d /hadoop/dfs/name/current && "$MY_POD" = hdfs-namenode-0 ]]' >> $OUT);
              (echo 'then' >> $OUT);
              (echo ' $HADOOP_PREFIX/bin/hdfs --config $HADOOP_CONF_DIR namenode -format -force -nonInteractive hdfs-k8s || exit 1' >> $OUT);
              (echo ' $HADOOP_PREFIX/bin/hdfs --config $HADOOP_CONF_DIR zkfc -formatZK -force -nonInteractive || exit 1' >> $OUT);
              (echo 'elif [[ ! -d /hadoop/dfs/name/current && "$MY_POD" = hdfs-namenode-1 ]]' >> $OUT);
              (echo 'then' >> $OUT);
              (echo ' $HADOOP_PREFIX/bin/hdfs --config $HADOOP_CONF_DIR namenode -bootstrapStandby -force -nonInteractive || exit 1' >> $OUT);
              (echo 'fi' >> $OUT);
              (echo '$HADOOP_PREFIX/sbin/hadoop-daemon.sh --config $HADOOP_CONF_DIR start zkfc' >> $OUT);
              (echo '$HADOOP_PREFIX/bin/hdfs --config $HADOOP_CONF_DIR namenode' >> $OUT);
              chmod +x $OUT
          env:
            - name: OUT
              value: /nn-start/run.sh
          volumeMounts:
            - name: nn-start
              mountPath: /nn-start/
      {{- if .Values.kerberosEnabled }}
        - name: copy-kerberos-keytab
          image: busybox:1.27.1
          command: ['sh', '-c']
          args:
            - cp /kerberos-keytabs/$MY_NODE_NAME.keytab /kerberos-keytab-copy/hdfs.keytab
          env:
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: kerberos-keytabs
              mountPath: /kerberos-keytabs
            - name: kerberos-keytab-copy
              mountPath: /kerberos-keytab-copy
      {{- end }}
      {{- if .Values.namenodePinningEnabled }}
      # Pin namenode pods to a set of nodes. You can label your node like below:
      #   $ kubectl label nodes YOUR-NODE hdfs-namenode-selector=hdfs-namenode
      nodeSelector:
        hdfs-namenode-selector: hdfs-namenode
      {{- end }}
      restartPolicy: Always
      volumes:
        - name: nn-start
          emptyDir: {}
        {{- if .Values.kerberosEnabled }}
        - name: kerberos-config
          configMap:
            name: {{ .Values.kerberosConfigMap }}
        - name: kerberos-keytabs
          secret:
            secretName: {{ .Values.kerberosKeytabsSecret }}
        - name: kerberos-keytab-copy
          emptyDir: {}
        {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.podSecurityContext.runAsUser }}
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: metadatadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.metadataVolumeSize }}
