# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A headless service to create DNS records.
apiVersion: v1
kind: Service
metadata:
  name: hdfs-namenode
  labels:
    app: hdfs-namenode
spec:
  ports:
  - port: 8020
    name: fs
  clusterIP: None
  selector:
    app: hdfs-namenode
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: hdfs-namenode
spec:
  serviceName: "hdfs-namenode"
  # Create a size-1 set. The namenode DNS name will be
  # hdfs-namenode-0.hdfs-namenode.default.svc.YOUR-CLUSTER-DOMAIN
  replicas: 1
  template:
    metadata:
      labels:
        app: hdfs-namenode
    spec:
      # Use hostNetwork so datanodes connect to namenode without going through an overlay network
      # like weave. Otherwise, namenode fails to see physical IP address of datanodes.
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: hdfs-namenode
          image: uhopper/hadoop-namenode:2.7.2
          env:
            # The following env vars are listed according to low-to-high precendence order.
            # i.e. Whoever comes last will override the earlier value of the same variable.
            {{- if .Values.kerberosEnabled }}
            - name: CORE_CONF_hadoop_security_authentication
              value: kerberos
            - name: CORE_CONF_hadoop_security_authorization
              value: "true"
            - name: CORE_CONF_hadoop_rpc_protection
              value: privacy
            - name:   HDFS_CONF_dfs_block_access_token_enable
              value: "true"
            - name:   HDFS_CONF_dfs_encrypt_data_transfer
              value: "true"
            - name: HDFS_CONF_dfs_namenode_kerberos_principal
              value: hdfs/_HOST@{{ required "A valid kerberosRealm entry required!" .Values.kerberosRealm }}
            - name:  HDFS_CONF_dfs_namenode_kerberos_https_principal
              value: http/_HOST@{{ required "A valid kerberosRealm entry required!" .Values.kerberosRealm }}
            - name: HDFS_CONF_dfs_web_authentication_kerberos_principal
              value: http/_HOST@{{ required "A valid kerberosRealm entry required!" .Values.kerberosRealm }}
            - name: HDFS_CONF_dfs_namenode_keytab_file
              value: /etc/security/hdfs.keytab
            {{- end }}
            {{- range $key, $value := .Values.customHadoopConfig }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
            - name: CLUSTER_NAME
              value: hdfs-k8s
          ports:
          - containerPort: 8020
            name: fs
          volumeMounts:
            - name: hdfs-name
              mountPath: /hadoop/dfs/name
            {{- if .Values.kerberosEnabled }}
            - name: kerberos-config
              mountPath: /etc/krb5.conf
              subPath: {{ .Values.kerberosConfigFileName }}
              readOnly: true
            - name: kerberos-keytab
              mountPath: /etc/security/hdfs.keytab
              readOnly: true
            {{- end }}
      # Pin the pod to a node. You can label your node like below:
      #   $ kubectl label nodes YOUR-NODE hdfs-namenode-selector=hdfs-namenode-0
      nodeSelector:
        hdfs-namenode-selector: hdfs-namenode-0
      restartPolicy: Always
      volumes:
        - name: hdfs-name
          hostPath:
            path: {{ .Values.nameNodeHostPath }}
        {{- if .Values.kerberosEnabled }}
        - name: kerberos-config
          configMap:
            name: {{ .Values.kerberosConfigMap }}
        - name: kerberos-keytab
          hostPath:
            path: {{ .Values.kerberosKeytabHostPath }}
        {{- end }}
