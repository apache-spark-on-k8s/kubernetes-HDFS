# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A headless service to create DNS records.
apiVersion: v1
kind: Service
metadata:
  name: hdfs-journalnode
  labels:
    app: hdfs-journalnode
  annotations:
    # TODO: Deprecated. Replace tolerate-unready-endpoints with
    # v1.Service.PublishNotReadyAddresses.
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - port: 8485
    name: jn
  - port: 8480
    name: http
  clusterIP: None
  selector:
    app: hdfs-journalnode
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: hdfs-journalnode
spec:
  selector:
    matchLabels:
      app: hdfs-journalnode
  minAvailable: {{ div .Values.quorumSize 2 | add1 }}
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: hdfs-journalnode
spec:
  serviceName: "hdfs-journalnode"
  # Create a StatefulSet. The journalnode DNS names will be like
  # hdfs-journalnode-0.hdfs-journalnode.default.svc.cluster.local,
  # hdfs-journalnode-1.hdfs-journalnode.default.svc.cluster.local,
  # hdfs-journalnode-2.hdfs-journalnode.default.svc.cluster.local
  replicas: {{ .Values.quorumSize }}
  template:
    metadata:
      labels:
        app: hdfs-journalnode
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - hfds-journalnode
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: hdfs-journalnode
          image: uhopper/hadoop-namenode:2.7.2
          env:
            # The following env vars are listed according to low-to-high precedence order.
            # i.e. Whoever comes last will override the earlier value of the same variable.
          {{- if .Values.kerberosEnabled }}
            - name: CORE_CONF_hadoop_security_authentication
              value: kerberos
            - name: CORE_CONF_hadoop_security_authorization
              value: "true"
            - name: CORE_CONF_hadoop_rpc_protection
              value: privacy
            - name: HDFS_CONF_dfs_journalnode_kerberos_principal
              value: hdfs/_HOST@{{ required "A valid kerberosRealm entry required!" .Values.kerberosRealm }}
            - name: HDFS_CONF_dfs_journalnode_kerberos_internal_spnego_principal
              value: HTTP/_HOST@{{ required "A valid kerberosRealm entry required!" .Values.kerberosRealm }}
            - name: HDFS_CONF_dfs_journalnode_keytab_file
              value: /etc/security/hdfs.keytab
            {{- end }}
            {{- range $key, $value := .Values.customHadoopConfig }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
            - name: HDFS_CONF_dfs_journalnode_edits_dir
              value: /hadoop/dfs/journal
          command: ["/entrypoint.sh"]
          args: ["/opt/hadoop-2.7.2/bin/hdfs", "--config", "/etc/hadoop", "journalnode"]
          ports:
          - containerPort: 8485
            name: jn
          - containerPort: 8480
            name: http
          volumeMounts:
            - name: editdir
              mountPath: /hadoop/dfs/journal
           {{- if .Values.kerberosEnabled }}
            - name: kerberos-config
              mountPath: /etc/krb5.conf
              subPath: {{ .Values.kerberosConfigFileName }}
              readOnly: true
            - name: kerberos-keytab-copy
              mountPath: /etc/security/
              readOnly: true
            {{- end }}
     {{- if .Values.kerberosEnabled }}
      initContainers:
        - name: copy-kerberos-keytab
          image: busybox:1.27.1
          command: ['sh', '-c']
          args:
            - cp /kerberos-keytabs/${MY_KERBEROS_NAME}*.keytab /kerberos-keytab-copy/hdfs.keytab
          env:
            - name: MY_KERBEROS_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: kerberos-keytabs
              mountPath: /kerberos-keytabs
            - name: kerberos-keytab-copy
              mountPath: /kerberos-keytab-copy
      {{- end }}
      restartPolicy: Always
      {{- if .Values.kerberosEnabled }}
      volumes:
        - name: kerberos-config
          configMap:
            name: {{ .Values.kerberosConfigMap }}
        - name: kerberos-keytabs
          secret:
            secretName: {{ .Values.kerberosKeytabsSecret }}
        - name: kerberos-keytab-copy
          emptyDir: {}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.podSecurityContext.runAsUser }}
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: editdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.editdataVolumeSize }}
